// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Models;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(TCTravelContext))]
    [Migration("20240413130257_NewItineraryUpdate")]
    partial class NewItineraryUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("backend.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BookingNotes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DriverId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("TripDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("TripEndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("TripStartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("backend.Models.BookingLocation", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StopOver")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookingId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("BookingLocations");
                });

            modelBuilder.Entity("backend.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("backend.Models.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("TEXT");

                    b.Property<string>("DrivingLicenseNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DriverId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("backend.Models.Itinerary", b =>
                {
                    b.Property<int>("ItineraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItineraryNotes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PassengerCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("TripDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("TripEndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("TripStartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("ItineraryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Itineraries");
                });

            modelBuilder.Entity("backend.Models.ItineraryLocation", b =>
                {
                    b.Property<int>("ItineraryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StopOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StopOver")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TravelTimeNextLocale")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItineraryId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("ItineraryLocations");
                });

            modelBuilder.Entity("backend.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationLat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationLng")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("backend.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GasType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Make")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("TEXT");

                    b.Property<int>("Seats")
                        .HasColumnType("INTEGER");

                    b.HasKey("VehicleId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("backend.Models.Booking", b =>
                {
                    b.HasOne("backend.Models.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Driver", "Driver")
                        .WithMany("Bookings")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Vehicle", "Vehicle")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Driver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("backend.Models.BookingLocation", b =>
                {
                    b.HasOne("backend.Models.Booking", "Booking")
                        .WithMany("BookingLocations")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Location", "Location")
                        .WithMany("BookingLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("backend.Models.Itinerary", b =>
                {
                    b.HasOne("backend.Models.Customer", "Customer")
                        .WithMany("Itineraries")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("backend.Models.ItineraryLocation", b =>
                {
                    b.HasOne("backend.Models.Itinerary", "Itinerary")
                        .WithMany("ItineraryLocations")
                        .HasForeignKey("ItineraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Location", "Location")
                        .WithMany("ItineraryLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Itinerary");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("backend.Models.Booking", b =>
                {
                    b.Navigation("BookingLocations");
                });

            modelBuilder.Entity("backend.Models.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Itineraries");
                });

            modelBuilder.Entity("backend.Models.Driver", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("backend.Models.Itinerary", b =>
                {
                    b.Navigation("ItineraryLocations");
                });

            modelBuilder.Entity("backend.Models.Location", b =>
                {
                    b.Navigation("BookingLocations");

                    b.Navigation("ItineraryLocations");
                });

            modelBuilder.Entity("backend.Models.Vehicle", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
